"use strict";(self.webpackChunkportfolio_3d=self.webpackChunkportfolio_3d||[]).push([[26],{1026:function(e,t,r){r.r(t),r.d(t,{default:function(){return g}});var n=r(9477),a=r(7294),i=r(7409),o=r(477);const l=e=>e===Object(e)&&!Array.isArray(e)&&"function"!=typeof e;function m(e,t){const r=(0,o.A)((e=>e.gl)),i=(0,o.F)(n.TextureLoader,l(e)?Object.values(e):e);if((0,a.useLayoutEffect)((()=>{null==t||t(i)}),[t]),(0,a.useEffect)((()=>{if("initTexture"in r){(Array.isArray(i)?i:[i]).forEach(r.initTexture)}}),[r,i]),l(e)){const t={};let r=0;for(const n in e)t[n]=i[r++];return t}return i}m.preload=e=>o.F.preload(n.TextureLoader,e),m.clear=e=>o.F.clear(n.TextureLoader,e);var s=r(7462),u=r(5878);const h=(()=>parseInt(n.REVISION.replace(/\D+/g,"")))();class c extends n.ShaderMaterial{constructor(e=new n.Vector2){super({uniforms:{inputBuffer:new n.Uniform(null),depthBuffer:new n.Uniform(null),resolution:new n.Uniform(new n.Vector2),texelSize:new n.Uniform(new n.Vector2),halfTexelSize:new n.Uniform(new n.Vector2),kernel:new n.Uniform(0),scale:new n.Uniform(1),cameraNear:new n.Uniform(0),cameraFar:new n.Uniform(1),minDepthThreshold:new n.Uniform(0),maxDepthThreshold:new n.Uniform(1),depthScale:new n.Uniform(0),depthToBlurRatioBias:new n.Uniform(.25)},fragmentShader:`#include <common>\n        #include <dithering_pars_fragment>      \n        uniform sampler2D inputBuffer;\n        uniform sampler2D depthBuffer;\n        uniform float cameraNear;\n        uniform float cameraFar;\n        uniform float minDepthThreshold;\n        uniform float maxDepthThreshold;\n        uniform float depthScale;\n        uniform float depthToBlurRatioBias;\n        varying vec2 vUv;\n        varying vec2 vUv0;\n        varying vec2 vUv1;\n        varying vec2 vUv2;\n        varying vec2 vUv3;\n\n        void main() {\n          float depthFactor = 0.0;\n          \n          #ifdef USE_DEPTH\n            vec4 depth = texture2D(depthBuffer, vUv);\n            depthFactor = smoothstep(minDepthThreshold, maxDepthThreshold, 1.0-(depth.r * depth.a));\n            depthFactor *= depthScale;\n            depthFactor = max(0.0, min(1.0, depthFactor + 0.25));\n          #endif\n          \n          vec4 sum = texture2D(inputBuffer, mix(vUv0, vUv, depthFactor));\n          sum += texture2D(inputBuffer, mix(vUv1, vUv, depthFactor));\n          sum += texture2D(inputBuffer, mix(vUv2, vUv, depthFactor));\n          sum += texture2D(inputBuffer, mix(vUv3, vUv, depthFactor));\n          gl_FragColor = sum * 0.25 ;\n\n          #include <dithering_fragment>\n          #include <tonemapping_fragment>\n          #include <${h>=154?"colorspace_fragment":"encodings_fragment"}>\n        }`,vertexShader:"uniform vec2 texelSize;\n        uniform vec2 halfTexelSize;\n        uniform float kernel;\n        uniform float scale;\n        varying vec2 vUv;\n        varying vec2 vUv0;\n        varying vec2 vUv1;\n        varying vec2 vUv2;\n        varying vec2 vUv3;\n\n        void main() {\n          vec2 uv = position.xy * 0.5 + 0.5;\n          vUv = uv;\n\n          vec2 dUv = (texelSize * vec2(kernel) + halfTexelSize) * scale;\n          vUv0 = vec2(uv.x - dUv.x, uv.y + dUv.y);\n          vUv1 = vec2(uv.x + dUv.x, uv.y + dUv.y);\n          vUv2 = vec2(uv.x + dUv.x, uv.y - dUv.y);\n          vUv3 = vec2(uv.x - dUv.x, uv.y - dUv.y);\n\n          gl_Position = vec4(position.xy, 1.0, 1.0);\n        }",blending:n.NoBlending,depthWrite:!1,depthTest:!1}),this.toneMapped=!1,this.setTexelSize(e.x,e.y),this.kernel=new Float32Array([0,1,2,2,3])}setTexelSize(e,t){this.uniforms.texelSize.value.set(e,t),this.uniforms.halfTexelSize.value.set(e,t).multiplyScalar(.5)}setResolution(e){this.uniforms.resolution.value.copy(e)}}class d{constructor({gl:e,resolution:t,width:r=500,height:a=500,minDepthThreshold:i=0,maxDepthThreshold:o=1,depthScale:l=0,depthToBlurRatioBias:m=.25}){this.renderToScreen=!1,this.renderTargetA=new n.WebGLRenderTarget(t,t,{minFilter:n.LinearFilter,magFilter:n.LinearFilter,stencilBuffer:!1,depthBuffer:!1,type:n.HalfFloatType}),this.renderTargetB=this.renderTargetA.clone(),this.convolutionMaterial=new c,this.convolutionMaterial.setTexelSize(1/r,1/a),this.convolutionMaterial.setResolution(new n.Vector2(r,a)),this.scene=new n.Scene,this.camera=new n.Camera,this.convolutionMaterial.uniforms.minDepthThreshold.value=i,this.convolutionMaterial.uniforms.maxDepthThreshold.value=o,this.convolutionMaterial.uniforms.depthScale.value=l,this.convolutionMaterial.uniforms.depthToBlurRatioBias.value=m,this.convolutionMaterial.defines.USE_DEPTH=l>0;const s=new Float32Array([-1,-1,0,3,-1,0,-1,3,0]),u=new Float32Array([0,0,2,0,0,2]),h=new n.BufferGeometry;h.setAttribute("position",new n.BufferAttribute(s,3)),h.setAttribute("uv",new n.BufferAttribute(u,2)),this.screen=new n.Mesh(h,this.convolutionMaterial),this.screen.frustumCulled=!1,this.scene.add(this.screen)}render(e,t,r){const n=this.scene,a=this.camera,i=this.renderTargetA,o=this.renderTargetB;let l=this.convolutionMaterial,m=l.uniforms;m.depthBuffer.value=t.depthTexture;const s=l.kernel;let u,h,c,d=t;for(h=0,c=s.length-1;h<c;++h)u=0==(1&h)?i:o,m.kernel.value=s[h],m.inputBuffer.value=d.texture,e.setRenderTarget(u),e.render(n,a),d=u;m.kernel.value=s[h],m.inputBuffer.value=d.texture,e.setRenderTarget(this.renderToScreen?null:r),e.render(n,a)}}class f extends n.MeshStandardMaterial{constructor(e={}){super(e),this._tDepth={value:null},this._distortionMap={value:null},this._tDiffuse={value:null},this._tDiffuseBlur={value:null},this._textureMatrix={value:null},this._hasBlur={value:!1},this._mirror={value:0},this._mixBlur={value:0},this._blurStrength={value:.5},this._minDepthThreshold={value:.9},this._maxDepthThreshold={value:1},this._depthScale={value:0},this._depthToBlurRatioBias={value:.25},this._distortion={value:1},this._mixContrast={value:1},this.setValues(e)}onBeforeCompile(e){var t;null!=(t=e.defines)&&t.USE_UV||(e.defines.USE_UV=""),e.uniforms.hasBlur=this._hasBlur,e.uniforms.tDiffuse=this._tDiffuse,e.uniforms.tDepth=this._tDepth,e.uniforms.distortionMap=this._distortionMap,e.uniforms.tDiffuseBlur=this._tDiffuseBlur,e.uniforms.textureMatrix=this._textureMatrix,e.uniforms.mirror=this._mirror,e.uniforms.mixBlur=this._mixBlur,e.uniforms.mixStrength=this._blurStrength,e.uniforms.minDepthThreshold=this._minDepthThreshold,e.uniforms.maxDepthThreshold=this._maxDepthThreshold,e.uniforms.depthScale=this._depthScale,e.uniforms.depthToBlurRatioBias=this._depthToBlurRatioBias,e.uniforms.distortion=this._distortion,e.uniforms.mixContrast=this._mixContrast,e.vertexShader=`\n        uniform mat4 textureMatrix;\n        varying vec4 my_vUv;\n      ${e.vertexShader}`,e.vertexShader=e.vertexShader.replace("#include <project_vertex>","#include <project_vertex>\n        my_vUv = textureMatrix * vec4( position, 1.0 );\n        gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );"),e.fragmentShader=`\n        uniform sampler2D tDiffuse;\n        uniform sampler2D tDiffuseBlur;\n        uniform sampler2D tDepth;\n        uniform sampler2D distortionMap;\n        uniform float distortion;\n        uniform float cameraNear;\n\t\t\t  uniform float cameraFar;\n        uniform bool hasBlur;\n        uniform float mixBlur;\n        uniform float mirror;\n        uniform float mixStrength;\n        uniform float minDepthThreshold;\n        uniform float maxDepthThreshold;\n        uniform float mixContrast;\n        uniform float depthScale;\n        uniform float depthToBlurRatioBias;\n        varying vec4 my_vUv;\n        ${e.fragmentShader}`,e.fragmentShader=e.fragmentShader.replace("#include <emissivemap_fragment>","#include <emissivemap_fragment>\n\n      float distortionFactor = 0.0;\n      #ifdef USE_DISTORTION\n        distortionFactor = texture2D(distortionMap, vUv).r * distortion;\n      #endif\n\n      vec4 new_vUv = my_vUv;\n      new_vUv.x += distortionFactor;\n      new_vUv.y += distortionFactor;\n\n      vec4 base = texture2DProj(tDiffuse, new_vUv);\n      vec4 blur = texture2DProj(tDiffuseBlur, new_vUv);\n\n      vec4 merge = base;\n\n      #ifdef USE_NORMALMAP\n        vec2 normal_uv = vec2(0.0);\n        vec4 normalColor = texture2D(normalMap, vUv * normalScale);\n        vec3 my_normal = normalize( vec3( normalColor.r * 2.0 - 1.0, normalColor.b,  normalColor.g * 2.0 - 1.0 ) );\n        vec3 coord = new_vUv.xyz / new_vUv.w;\n        normal_uv = coord.xy + coord.z * my_normal.xz * 0.05;\n        vec4 base_normal = texture2D(tDiffuse, normal_uv);\n        vec4 blur_normal = texture2D(tDiffuseBlur, normal_uv);\n        merge = base_normal;\n        blur = blur_normal;\n      #endif\n\n      float depthFactor = 0.0001;\n      float blurFactor = 0.0;\n\n      #ifdef USE_DEPTH\n        vec4 depth = texture2DProj(tDepth, new_vUv);\n        depthFactor = smoothstep(minDepthThreshold, maxDepthThreshold, 1.0-(depth.r * depth.a));\n        depthFactor *= depthScale;\n        depthFactor = max(0.0001, min(1.0, depthFactor));\n\n        #ifdef USE_BLUR\n          blur = blur * min(1.0, depthFactor + depthToBlurRatioBias);\n          merge = merge * min(1.0, depthFactor + 0.5);\n        #else\n          merge = merge * depthFactor;\n        #endif\n\n      #endif\n\n      float reflectorRoughnessFactor = roughness;\n      #ifdef USE_ROUGHNESSMAP\n        vec4 reflectorTexelRoughness = texture2D( roughnessMap, vUv );\n        reflectorRoughnessFactor *= reflectorTexelRoughness.g;\n      #endif\n\n      #ifdef USE_BLUR\n        blurFactor = min(1.0, mixBlur * reflectorRoughnessFactor);\n        merge = mix(merge, blur, blurFactor);\n      #endif\n\n      vec4 newMerge = vec4(0.0, 0.0, 0.0, 1.0);\n      newMerge.r = (merge.r - 0.5) * mixContrast + 0.5;\n      newMerge.g = (merge.g - 0.5) * mixContrast + 0.5;\n      newMerge.b = (merge.b - 0.5) * mixContrast + 0.5;\n\n      diffuseColor.rgb = diffuseColor.rgb * ((1.0 - min(1.0, mirror)) + newMerge.rgb * mixStrength);\n      ")}get tDiffuse(){return this._tDiffuse.value}set tDiffuse(e){this._tDiffuse.value=e}get tDepth(){return this._tDepth.value}set tDepth(e){this._tDepth.value=e}get distortionMap(){return this._distortionMap.value}set distortionMap(e){this._distortionMap.value=e}get tDiffuseBlur(){return this._tDiffuseBlur.value}set tDiffuseBlur(e){this._tDiffuseBlur.value=e}get textureMatrix(){return this._textureMatrix.value}set textureMatrix(e){this._textureMatrix.value=e}get hasBlur(){return this._hasBlur.value}set hasBlur(e){this._hasBlur.value=e}get mirror(){return this._mirror.value}set mirror(e){this._mirror.value=e}get mixBlur(){return this._mixBlur.value}set mixBlur(e){this._mixBlur.value=e}get mixStrength(){return this._blurStrength.value}set mixStrength(e){this._blurStrength.value=e}get minDepthThreshold(){return this._minDepthThreshold.value}set minDepthThreshold(e){this._minDepthThreshold.value=e}get maxDepthThreshold(){return this._maxDepthThreshold.value}set maxDepthThreshold(e){this._maxDepthThreshold.value=e}get depthScale(){return this._depthScale.value}set depthScale(e){this._depthScale.value=e}get depthToBlurRatioBias(){return this._depthToBlurRatioBias.value}set depthToBlurRatioBias(e){this._depthToBlurRatioBias.value=e}get distortion(){return this._distortion.value}set distortion(e){this._distortion.value=e}get mixContrast(){return this._mixContrast.value}set mixContrast(e){this._mixContrast.value=e}}const p=a.forwardRef((({mixBlur:e=0,mixStrength:t=1,resolution:r=256,blur:i=[0,0],minDepthThreshold:l=.9,maxDepthThreshold:m=1,depthScale:h=0,depthToBlurRatioBias:c=.25,mirror:p=0,distortion:v=1,mixContrast:g=1,distortionMap:x,reflectorOffset:_=0,...y},S)=>{(0,o.e)({MeshReflectorMaterialImpl:f});const T=(0,o.A)((({gl:e})=>e)),D=(0,o.A)((({camera:e})=>e)),B=(0,o.A)((({scene:e})=>e)),U=(i=Array.isArray(i)?i:[i,i])[0]+i[1]>0,C=a.useRef(null),[M]=a.useState((()=>new n.Plane)),[E]=a.useState((()=>new n.Vector3)),[b]=a.useState((()=>new n.Vector3)),[w]=a.useState((()=>new n.Vector3)),[F]=a.useState((()=>new n.Matrix4)),[R]=a.useState((()=>new n.Vector3(0,0,-1))),[P]=a.useState((()=>new n.Vector4)),[A]=a.useState((()=>new n.Vector3)),[k]=a.useState((()=>new n.Vector3)),[O]=a.useState((()=>new n.Vector4)),[N]=a.useState((()=>new n.Matrix4)),[V]=a.useState((()=>new n.PerspectiveCamera)),L=a.useCallback((()=>{var e;const t=C.current.parent||(null==(e=C.current)?void 0:e.__r3f.parent);if(!t)return;if(b.setFromMatrixPosition(t.matrixWorld),w.setFromMatrixPosition(D.matrixWorld),F.extractRotation(t.matrixWorld),E.set(0,0,1),E.applyMatrix4(F),b.addScaledVector(E,_),A.subVectors(b,w),A.dot(E)>0)return;A.reflect(E).negate(),A.add(b),F.extractRotation(D.matrixWorld),R.set(0,0,-1),R.applyMatrix4(F),R.add(w),k.subVectors(b,R),k.reflect(E).negate(),k.add(b),V.position.copy(A),V.up.set(0,1,0),V.up.applyMatrix4(F),V.up.reflect(E),V.lookAt(k),V.far=D.far,V.updateMatrixWorld(),V.projectionMatrix.copy(D.projectionMatrix),N.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1),N.multiply(V.projectionMatrix),N.multiply(V.matrixWorldInverse),N.multiply(t.matrixWorld),M.setFromNormalAndCoplanarPoint(E,b),M.applyMatrix4(V.matrixWorldInverse),P.set(M.normal.x,M.normal.y,M.normal.z,M.constant);const r=V.projectionMatrix;O.x=(Math.sign(P.x)+r.elements[8])/r.elements[0],O.y=(Math.sign(P.y)+r.elements[9])/r.elements[5],O.z=-1,O.w=(1+r.elements[10])/r.elements[14],P.multiplyScalar(2/P.dot(O)),r.elements[2]=P.x,r.elements[6]=P.y,r.elements[10]=P.z+1,r.elements[14]=P.w}),[D,_]),[z,I,j,W]=a.useMemo((()=>{const a={minFilter:n.LinearFilter,magFilter:n.LinearFilter,type:n.HalfFloatType},o=new n.WebGLRenderTarget(r,r,a);o.depthBuffer=!0,o.depthTexture=new n.DepthTexture(r,r),o.depthTexture.format=n.DepthFormat,o.depthTexture.type=n.UnsignedShortType;const s=new n.WebGLRenderTarget(r,r,a);return[o,s,new d({gl:T,resolution:r,width:i[0],height:i[1],minDepthThreshold:l,maxDepthThreshold:m,depthScale:h,depthToBlurRatioBias:c}),{mirror:p,textureMatrix:N,mixBlur:e,tDiffuse:o.texture,tDepth:o.depthTexture,tDiffuseBlur:s.texture,hasBlur:U,mixStrength:t,minDepthThreshold:l,maxDepthThreshold:m,depthScale:h,depthToBlurRatioBias:c,distortion:v,distortionMap:x,mixContrast:g,"defines-USE_BLUR":U?"":void 0,"defines-USE_DEPTH":h>0?"":void 0,"defines-USE_DISTORTION":x?"":void 0}]}),[T,i,N,r,p,U,e,t,l,m,h,c,v,x,g]);return(0,o.C)((()=>{var e;const t=C.current.parent||(null==(e=C.current)?void 0:e.__r3f.parent);if(!t)return;t.visible=!1;const r=T.xr.enabled,n=T.shadowMap.autoUpdate;L(),T.xr.enabled=!1,T.shadowMap.autoUpdate=!1,T.setRenderTarget(z),T.state.buffers.depth.setMask(!0),T.autoClear||T.clear(),T.render(B,V),U&&j.render(T,z,I),T.xr.enabled=r,T.shadowMap.autoUpdate=n,t.visible=!0,T.setRenderTarget(null)})),a.createElement("meshReflectorMaterialImpl",(0,s.Z)({attach:"material",key:"key"+W["defines-USE_BLUR"]+W["defines-USE_DEPTH"]+W["defines-USE_DISTORTION"],ref:(0,u.Z)([C,S])},W,y))}));var v=r(7456);i.L.preload(v.O+"/models/scene.glb");var g=e=>{const{nodes:t,materials:r}=(0,i.L)(v.O+"/models/scene.glb"),o=m(v.O+"/textures/baked.jpg");o.flipY=!1,o.colorSpace=n.SRGBColorSpace;const l=new n.MeshStandardMaterial({map:o,roughness:1,metalness:0}),s=new n.MeshStandardMaterial({map:o,transparent:!0,opacity:.4});return a.createElement("group",Object.assign({},e,{dispose:null}),a.createElement("mesh",{name:"plant001",geometry:t.plant001.geometry,material:l,position:[1.213,.107,-1.665],rotation:[-Math.PI,.08,-Math.PI]},a.createElement("mesh",{name:"Circle001",geometry:t.Circle001.geometry,material:l}),a.createElement("mesh",{name:"NurbsPath006",geometry:t.NurbsPath006.geometry,material:l}),a.createElement("mesh",{name:"NurbsPath007",geometry:t.NurbsPath007.geometry,material:l}),a.createElement("mesh",{name:"NurbsPath008",geometry:t.NurbsPath008.geometry,material:l}),a.createElement("mesh",{name:"NurbsPath009",geometry:t.NurbsPath009.geometry,material:l}),a.createElement("mesh",{name:"NurbsPath010",geometry:t.NurbsPath010.geometry,material:l}),a.createElement("mesh",{name:"NurbsPath011",geometry:t.NurbsPath011.geometry,material:l})),a.createElement("group",{name:"Macbook",position:[.031,.735,-1.559]},a.createElement("mesh",{name:"Circle002",geometry:t.Circle002.geometry,material:l}),a.createElement("mesh",{name:"Circle002_1",geometry:t.Circle002_1.geometry,material:l}),a.createElement("mesh",{name:"Circle002_2",geometry:t.Circle002_2.geometry,material:l}),a.createElement("mesh",{name:"Circle002_3",geometry:t.Circle002_3.geometry,material:l}),a.createElement("mesh",{name:"Circle002_4",geometry:t.Circle002_4.geometry,material:l}),a.createElement("group",{name:"Bottom",position:[0,-.009,0]},a.createElement("mesh",{name:"Circle006",geometry:t.Circle006.geometry,material:l}),a.createElement("mesh",{name:"Circle006_1",geometry:t.Circle006_1.geometry,material:l})),a.createElement("mesh",{name:"FrontCameraRing001",geometry:t.FrontCameraRing001.geometry,material:l,position:[-.003,.364,-.3]}),a.createElement("group",{name:"Keyboard",position:[-.219,-.003,-.154]},a.createElement("mesh",{name:"Circle",geometry:t.Circle.geometry,material:l}),a.createElement("mesh",{name:"Circle_1",geometry:t.Circle_1.geometry,material:l}),a.createElement("mesh",{name:"Circle_2",geometry:t.Circle_2.geometry,material:l})),a.createElement("mesh",{name:"KeyboardKeyHole",geometry:t.KeyboardKeyHole.geometry,material:l,position:[-.219,-.003,-.154]}),a.createElement("mesh",{name:"RubberFoot",geometry:t.RubberFoot.geometry,material:l,position:[-.222,-.014,.146]}),a.createElement("group",{name:"ScreenHinge",position:[0,-.004,-.196]},a.createElement("mesh",{name:"Circle012",geometry:t.Circle012.geometry,material:l}),a.createElement("mesh",{name:"Circle012_1",geometry:t.Circle012_1.geometry,material:l})),a.createElement("group",{name:"SpeakerLeft",position:[-.279,.001,.011]},a.createElement("mesh",{name:"Circle009",geometry:t.Circle009.geometry,material:l}),a.createElement("mesh",{name:"Circle009_1",geometry:t.Circle009_1.geometry,material:l})),a.createElement("group",{name:"SpeakerRight",position:[.227,.001,.011]},a.createElement("mesh",{name:"Circle003",geometry:t.Circle003.geometry,material:l}),a.createElement("mesh",{name:"Circle003_1",geometry:t.Circle003_1.geometry,material:l})),a.createElement("group",{name:"Top",position:[0,-.009,-.193],rotation:[1.311,0,0]},a.createElement("mesh",{name:"Circle005",geometry:t.Circle005.geometry,material:l}),a.createElement("mesh",{name:"Circle005_1",geometry:t.Circle005_1.geometry,material:l}),a.createElement("mesh",{name:"Circle005_2",geometry:t.Circle005_2.geometry,material:l}),a.createElement("mesh",{name:"Circle005_3",geometry:t.Circle005_3.geometry,material:l}),a.createElement("mesh",{name:"Circle005_4",geometry:t.Circle005_4.geometry,material:s},a.createElement(p,{blur:[0,0],mixBlur:.2,mixStrength:.4,mixContrast:1,resolution:256,mirror:1,depthScale:0,minDepthThreshold:.9,maxDepthThreshold:1,depthToBlurRatioBias:.25,distortion:1,reflectorOffset:.2,transparent:!0,opacity:.8})))),a.createElement("mesh",{name:"Desk",geometry:t.Desk.geometry,material:l,position:[-.618,0,-1.677]}),a.createElement("group",{name:"OfficeChair",position:[-.303,0,-.492],rotation:[-Math.PI/2,0,2.239]},a.createElement("mesh",{name:"OfficeChair_1",geometry:t.OfficeChair_1.geometry,material:l}),a.createElement("mesh",{name:"OfficeChair_2",geometry:t.OfficeChair_2.geometry,material:l}),a.createElement("mesh",{name:"OfficeChair_3",geometry:t.OfficeChair_3.geometry,material:l})),a.createElement("mesh",{name:"rubber_duck_toy",geometry:t.rubber_duck_toy.geometry,material:l,position:[0,0,-.344]}),a.createElement("mesh",{name:"Glass",geometry:t.Glass.geometry,material:s,position:[-2.119,1.346,-.663],scale:[.068,.324,.63]}),a.createElement("mesh",{name:"Plane_1",geometry:t.Plane_1.geometry,material:l}),a.createElement("mesh",{name:"Plane_2",geometry:t.Plane_2.geometry,material:l}),a.createElement("mesh",{name:"Plane_3",geometry:t.Plane_3.geometry,material:l}))}}}]);
//# sourceMappingURL=26-74bf3040add2138d1602.js.map