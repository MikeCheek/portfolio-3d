{"version":3,"file":"26-74bf3040add2138d1602.js","mappings":"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","sources":["webpack://portfolio-3d/./node_modules/@react-three/drei/core/useTexture.js","webpack://portfolio-3d/./node_modules/@react-three/drei/helpers/constants.js","webpack://portfolio-3d/./node_modules/@react-three/drei/materials/ConvolutionMaterial.js","webpack://portfolio-3d/./node_modules/@react-three/drei/materials/BlurPass.js","webpack://portfolio-3d/./node_modules/@react-three/drei/materials/MeshReflectorMaterial.js","webpack://portfolio-3d/./node_modules/@react-three/drei/core/MeshReflectorMaterial.js","webpack://portfolio-3d/./src/components/Office.tsx"],"sourcesContent":["import { TextureLoader } from 'three';\nimport { useThree, useLoader } from '@react-three/fiber';\nimport { useLayoutEffect, useEffect } from 'react';\n\nconst IsObject = url => url === Object(url) && !Array.isArray(url) && typeof url !== 'function';\nfunction useTexture(input, onLoad) {\n  const gl = useThree(state => state.gl);\n  const textures = useLoader(TextureLoader, IsObject(input) ? Object.values(input) : input);\n  useLayoutEffect(() => {\n    onLoad == null || onLoad(textures);\n  }, [onLoad]);\n\n  // https://github.com/mrdoob/three.js/issues/22696\n  // Upload the texture to the GPU immediately instead of waiting for the first render\n  // NOTE: only available for WebGLRenderer\n  useEffect(() => {\n    if ('initTexture' in gl) {\n      const array = Array.isArray(textures) ? textures : [textures];\n      array.forEach(gl.initTexture);\n    }\n  }, [gl, textures]);\n  if (IsObject(input)) {\n    const keyed = {};\n    let i = 0;\n    for (const key in input) keyed[key] = textures[i++];\n    return keyed;\n  } else {\n    return textures;\n  }\n}\nuseTexture.preload = url => useLoader.preload(TextureLoader, url);\nuseTexture.clear = input => useLoader.clear(TextureLoader, input);\n\nexport { IsObject, useTexture };\n","import { REVISION } from 'three';\n\nconst getVersion = () => parseInt(REVISION.replace(/\\D+/g, ''));\nconst version = /* @__PURE__ */getVersion();\n\nexport { version };\n","import * as THREE from 'three';\nimport { version } from '../helpers/constants.js';\n\nclass ConvolutionMaterial extends THREE.ShaderMaterial {\n  constructor(texelSize = new THREE.Vector2()) {\n    super({\n      uniforms: {\n        inputBuffer: new THREE.Uniform(null),\n        depthBuffer: new THREE.Uniform(null),\n        resolution: new THREE.Uniform(new THREE.Vector2()),\n        texelSize: new THREE.Uniform(new THREE.Vector2()),\n        halfTexelSize: new THREE.Uniform(new THREE.Vector2()),\n        kernel: new THREE.Uniform(0.0),\n        scale: new THREE.Uniform(1.0),\n        cameraNear: new THREE.Uniform(0.0),\n        cameraFar: new THREE.Uniform(1.0),\n        minDepthThreshold: new THREE.Uniform(0.0),\n        maxDepthThreshold: new THREE.Uniform(1.0),\n        depthScale: new THREE.Uniform(0.0),\n        depthToBlurRatioBias: new THREE.Uniform(0.25)\n      },\n      fragmentShader: `#include <common>\n        #include <dithering_pars_fragment>      \n        uniform sampler2D inputBuffer;\n        uniform sampler2D depthBuffer;\n        uniform float cameraNear;\n        uniform float cameraFar;\n        uniform float minDepthThreshold;\n        uniform float maxDepthThreshold;\n        uniform float depthScale;\n        uniform float depthToBlurRatioBias;\n        varying vec2 vUv;\n        varying vec2 vUv0;\n        varying vec2 vUv1;\n        varying vec2 vUv2;\n        varying vec2 vUv3;\n\n        void main() {\n          float depthFactor = 0.0;\n          \n          #ifdef USE_DEPTH\n            vec4 depth = texture2D(depthBuffer, vUv);\n            depthFactor = smoothstep(minDepthThreshold, maxDepthThreshold, 1.0-(depth.r * depth.a));\n            depthFactor *= depthScale;\n            depthFactor = max(0.0, min(1.0, depthFactor + 0.25));\n          #endif\n          \n          vec4 sum = texture2D(inputBuffer, mix(vUv0, vUv, depthFactor));\n          sum += texture2D(inputBuffer, mix(vUv1, vUv, depthFactor));\n          sum += texture2D(inputBuffer, mix(vUv2, vUv, depthFactor));\n          sum += texture2D(inputBuffer, mix(vUv3, vUv, depthFactor));\n          gl_FragColor = sum * 0.25 ;\n\n          #include <dithering_fragment>\n          #include <tonemapping_fragment>\n          #include <${version >= 154 ? 'colorspace_fragment' : 'encodings_fragment'}>\n        }`,\n      vertexShader: `uniform vec2 texelSize;\n        uniform vec2 halfTexelSize;\n        uniform float kernel;\n        uniform float scale;\n        varying vec2 vUv;\n        varying vec2 vUv0;\n        varying vec2 vUv1;\n        varying vec2 vUv2;\n        varying vec2 vUv3;\n\n        void main() {\n          vec2 uv = position.xy * 0.5 + 0.5;\n          vUv = uv;\n\n          vec2 dUv = (texelSize * vec2(kernel) + halfTexelSize) * scale;\n          vUv0 = vec2(uv.x - dUv.x, uv.y + dUv.y);\n          vUv1 = vec2(uv.x + dUv.x, uv.y + dUv.y);\n          vUv2 = vec2(uv.x + dUv.x, uv.y - dUv.y);\n          vUv3 = vec2(uv.x - dUv.x, uv.y - dUv.y);\n\n          gl_Position = vec4(position.xy, 1.0, 1.0);\n        }`,\n      blending: THREE.NoBlending,\n      depthWrite: false,\n      depthTest: false\n    });\n    this.toneMapped = false;\n    this.setTexelSize(texelSize.x, texelSize.y);\n    this.kernel = new Float32Array([0.0, 1.0, 2.0, 2.0, 3.0]);\n  }\n  setTexelSize(x, y) {\n    this.uniforms.texelSize.value.set(x, y);\n    this.uniforms.halfTexelSize.value.set(x, y).multiplyScalar(0.5);\n  }\n  setResolution(resolution) {\n    this.uniforms.resolution.value.copy(resolution);\n  }\n}\n\nexport { ConvolutionMaterial };\n","import { WebGLRenderTarget, LinearFilter, HalfFloatType, Vector2, Scene, Camera, BufferGeometry, BufferAttribute, Mesh } from 'three';\nimport { ConvolutionMaterial } from './ConvolutionMaterial.js';\n\nclass BlurPass {\n  constructor({\n    gl,\n    resolution,\n    width = 500,\n    height = 500,\n    minDepthThreshold = 0,\n    maxDepthThreshold = 1,\n    depthScale = 0,\n    depthToBlurRatioBias = 0.25\n  }) {\n    this.renderToScreen = false;\n    this.renderTargetA = new WebGLRenderTarget(resolution, resolution, {\n      minFilter: LinearFilter,\n      magFilter: LinearFilter,\n      stencilBuffer: false,\n      depthBuffer: false,\n      type: HalfFloatType\n    });\n    this.renderTargetB = this.renderTargetA.clone();\n    this.convolutionMaterial = new ConvolutionMaterial();\n    this.convolutionMaterial.setTexelSize(1.0 / width, 1.0 / height);\n    this.convolutionMaterial.setResolution(new Vector2(width, height));\n    this.scene = new Scene();\n    this.camera = new Camera();\n    this.convolutionMaterial.uniforms.minDepthThreshold.value = minDepthThreshold;\n    this.convolutionMaterial.uniforms.maxDepthThreshold.value = maxDepthThreshold;\n    this.convolutionMaterial.uniforms.depthScale.value = depthScale;\n    this.convolutionMaterial.uniforms.depthToBlurRatioBias.value = depthToBlurRatioBias;\n    this.convolutionMaterial.defines.USE_DEPTH = depthScale > 0;\n    const vertices = new Float32Array([-1, -1, 0, 3, -1, 0, -1, 3, 0]);\n    const uvs = new Float32Array([0, 0, 2, 0, 0, 2]);\n    const geometry = new BufferGeometry();\n    geometry.setAttribute('position', new BufferAttribute(vertices, 3));\n    geometry.setAttribute('uv', new BufferAttribute(uvs, 2));\n    this.screen = new Mesh(geometry, this.convolutionMaterial);\n    this.screen.frustumCulled = false;\n    this.scene.add(this.screen);\n  }\n  render(renderer, inputBuffer, outputBuffer) {\n    const scene = this.scene;\n    const camera = this.camera;\n    const renderTargetA = this.renderTargetA;\n    const renderTargetB = this.renderTargetB;\n    let material = this.convolutionMaterial;\n    let uniforms = material.uniforms;\n    uniforms.depthBuffer.value = inputBuffer.depthTexture;\n    const kernel = material.kernel;\n    let lastRT = inputBuffer;\n    let destRT;\n    let i, l;\n    // Apply the multi-pass blur.\n    for (i = 0, l = kernel.length - 1; i < l; ++i) {\n      // Alternate between targets.\n      destRT = (i & 1) === 0 ? renderTargetA : renderTargetB;\n      uniforms.kernel.value = kernel[i];\n      uniforms.inputBuffer.value = lastRT.texture;\n      renderer.setRenderTarget(destRT);\n      renderer.render(scene, camera);\n      lastRT = destRT;\n    }\n    uniforms.kernel.value = kernel[i];\n    uniforms.inputBuffer.value = lastRT.texture;\n    renderer.setRenderTarget(this.renderToScreen ? null : outputBuffer);\n    renderer.render(scene, camera);\n  }\n}\n\nexport { BlurPass };\n","import { MeshStandardMaterial } from 'three';\n\nclass MeshReflectorMaterial extends MeshStandardMaterial {\n  constructor(parameters = {}) {\n    super(parameters);\n    this._tDepth = {\n      value: null\n    };\n    this._distortionMap = {\n      value: null\n    };\n    this._tDiffuse = {\n      value: null\n    };\n    this._tDiffuseBlur = {\n      value: null\n    };\n    this._textureMatrix = {\n      value: null\n    };\n    this._hasBlur = {\n      value: false\n    };\n    this._mirror = {\n      value: 0.0\n    };\n    this._mixBlur = {\n      value: 0.0\n    };\n    this._blurStrength = {\n      value: 0.5\n    };\n    this._minDepthThreshold = {\n      value: 0.9\n    };\n    this._maxDepthThreshold = {\n      value: 1\n    };\n    this._depthScale = {\n      value: 0\n    };\n    this._depthToBlurRatioBias = {\n      value: 0.25\n    };\n    this._distortion = {\n      value: 1\n    };\n    this._mixContrast = {\n      value: 1.0\n    };\n    this.setValues(parameters);\n  }\n  onBeforeCompile(shader) {\n    var _shader$defines;\n    if (!((_shader$defines = shader.defines) != null && _shader$defines.USE_UV)) {\n      shader.defines.USE_UV = '';\n    }\n    shader.uniforms.hasBlur = this._hasBlur;\n    shader.uniforms.tDiffuse = this._tDiffuse;\n    shader.uniforms.tDepth = this._tDepth;\n    shader.uniforms.distortionMap = this._distortionMap;\n    shader.uniforms.tDiffuseBlur = this._tDiffuseBlur;\n    shader.uniforms.textureMatrix = this._textureMatrix;\n    shader.uniforms.mirror = this._mirror;\n    shader.uniforms.mixBlur = this._mixBlur;\n    shader.uniforms.mixStrength = this._blurStrength;\n    shader.uniforms.minDepthThreshold = this._minDepthThreshold;\n    shader.uniforms.maxDepthThreshold = this._maxDepthThreshold;\n    shader.uniforms.depthScale = this._depthScale;\n    shader.uniforms.depthToBlurRatioBias = this._depthToBlurRatioBias;\n    shader.uniforms.distortion = this._distortion;\n    shader.uniforms.mixContrast = this._mixContrast;\n    shader.vertexShader = `\n        uniform mat4 textureMatrix;\n        varying vec4 my_vUv;\n      ${shader.vertexShader}`;\n    shader.vertexShader = shader.vertexShader.replace('#include <project_vertex>', `#include <project_vertex>\n        my_vUv = textureMatrix * vec4( position, 1.0 );\n        gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );`);\n    shader.fragmentShader = `\n        uniform sampler2D tDiffuse;\n        uniform sampler2D tDiffuseBlur;\n        uniform sampler2D tDepth;\n        uniform sampler2D distortionMap;\n        uniform float distortion;\n        uniform float cameraNear;\n\t\t\t  uniform float cameraFar;\n        uniform bool hasBlur;\n        uniform float mixBlur;\n        uniform float mirror;\n        uniform float mixStrength;\n        uniform float minDepthThreshold;\n        uniform float maxDepthThreshold;\n        uniform float mixContrast;\n        uniform float depthScale;\n        uniform float depthToBlurRatioBias;\n        varying vec4 my_vUv;\n        ${shader.fragmentShader}`;\n    shader.fragmentShader = shader.fragmentShader.replace('#include <emissivemap_fragment>', `#include <emissivemap_fragment>\n\n      float distortionFactor = 0.0;\n      #ifdef USE_DISTORTION\n        distortionFactor = texture2D(distortionMap, vUv).r * distortion;\n      #endif\n\n      vec4 new_vUv = my_vUv;\n      new_vUv.x += distortionFactor;\n      new_vUv.y += distortionFactor;\n\n      vec4 base = texture2DProj(tDiffuse, new_vUv);\n      vec4 blur = texture2DProj(tDiffuseBlur, new_vUv);\n\n      vec4 merge = base;\n\n      #ifdef USE_NORMALMAP\n        vec2 normal_uv = vec2(0.0);\n        vec4 normalColor = texture2D(normalMap, vUv * normalScale);\n        vec3 my_normal = normalize( vec3( normalColor.r * 2.0 - 1.0, normalColor.b,  normalColor.g * 2.0 - 1.0 ) );\n        vec3 coord = new_vUv.xyz / new_vUv.w;\n        normal_uv = coord.xy + coord.z * my_normal.xz * 0.05;\n        vec4 base_normal = texture2D(tDiffuse, normal_uv);\n        vec4 blur_normal = texture2D(tDiffuseBlur, normal_uv);\n        merge = base_normal;\n        blur = blur_normal;\n      #endif\n\n      float depthFactor = 0.0001;\n      float blurFactor = 0.0;\n\n      #ifdef USE_DEPTH\n        vec4 depth = texture2DProj(tDepth, new_vUv);\n        depthFactor = smoothstep(minDepthThreshold, maxDepthThreshold, 1.0-(depth.r * depth.a));\n        depthFactor *= depthScale;\n        depthFactor = max(0.0001, min(1.0, depthFactor));\n\n        #ifdef USE_BLUR\n          blur = blur * min(1.0, depthFactor + depthToBlurRatioBias);\n          merge = merge * min(1.0, depthFactor + 0.5);\n        #else\n          merge = merge * depthFactor;\n        #endif\n\n      #endif\n\n      float reflectorRoughnessFactor = roughness;\n      #ifdef USE_ROUGHNESSMAP\n        vec4 reflectorTexelRoughness = texture2D( roughnessMap, vUv );\n        reflectorRoughnessFactor *= reflectorTexelRoughness.g;\n      #endif\n\n      #ifdef USE_BLUR\n        blurFactor = min(1.0, mixBlur * reflectorRoughnessFactor);\n        merge = mix(merge, blur, blurFactor);\n      #endif\n\n      vec4 newMerge = vec4(0.0, 0.0, 0.0, 1.0);\n      newMerge.r = (merge.r - 0.5) * mixContrast + 0.5;\n      newMerge.g = (merge.g - 0.5) * mixContrast + 0.5;\n      newMerge.b = (merge.b - 0.5) * mixContrast + 0.5;\n\n      diffuseColor.rgb = diffuseColor.rgb * ((1.0 - min(1.0, mirror)) + newMerge.rgb * mixStrength);\n      `);\n  }\n  get tDiffuse() {\n    return this._tDiffuse.value;\n  }\n  set tDiffuse(v) {\n    this._tDiffuse.value = v;\n  }\n  get tDepth() {\n    return this._tDepth.value;\n  }\n  set tDepth(v) {\n    this._tDepth.value = v;\n  }\n  get distortionMap() {\n    return this._distortionMap.value;\n  }\n  set distortionMap(v) {\n    this._distortionMap.value = v;\n  }\n  get tDiffuseBlur() {\n    return this._tDiffuseBlur.value;\n  }\n  set tDiffuseBlur(v) {\n    this._tDiffuseBlur.value = v;\n  }\n  get textureMatrix() {\n    return this._textureMatrix.value;\n  }\n  set textureMatrix(v) {\n    this._textureMatrix.value = v;\n  }\n  get hasBlur() {\n    return this._hasBlur.value;\n  }\n  set hasBlur(v) {\n    this._hasBlur.value = v;\n  }\n  get mirror() {\n    return this._mirror.value;\n  }\n  set mirror(v) {\n    this._mirror.value = v;\n  }\n  get mixBlur() {\n    return this._mixBlur.value;\n  }\n  set mixBlur(v) {\n    this._mixBlur.value = v;\n  }\n  get mixStrength() {\n    return this._blurStrength.value;\n  }\n  set mixStrength(v) {\n    this._blurStrength.value = v;\n  }\n  get minDepthThreshold() {\n    return this._minDepthThreshold.value;\n  }\n  set minDepthThreshold(v) {\n    this._minDepthThreshold.value = v;\n  }\n  get maxDepthThreshold() {\n    return this._maxDepthThreshold.value;\n  }\n  set maxDepthThreshold(v) {\n    this._maxDepthThreshold.value = v;\n  }\n  get depthScale() {\n    return this._depthScale.value;\n  }\n  set depthScale(v) {\n    this._depthScale.value = v;\n  }\n  get depthToBlurRatioBias() {\n    return this._depthToBlurRatioBias.value;\n  }\n  set depthToBlurRatioBias(v) {\n    this._depthToBlurRatioBias.value = v;\n  }\n  get distortion() {\n    return this._distortion.value;\n  }\n  set distortion(v) {\n    this._distortion.value = v;\n  }\n  get mixContrast() {\n    return this._mixContrast.value;\n  }\n  set mixContrast(v) {\n    this._mixContrast.value = v;\n  }\n}\n\nexport { MeshReflectorMaterial };\n","import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport { Plane, Vector3, Matrix4, Vector4, PerspectiveCamera, WebGLRenderTarget, DepthTexture, DepthFormat, UnsignedShortType, LinearFilter, HalfFloatType } from 'three';\nimport { extend, useThree, useFrame } from '@react-three/fiber';\nimport mergeRefs from 'react-merge-refs';\nimport { BlurPass } from '../materials/BlurPass.js';\nimport { MeshReflectorMaterial as MeshReflectorMaterial$1 } from '../materials/MeshReflectorMaterial.js';\n\nconst MeshReflectorMaterial = /* @__PURE__ */React.forwardRef(({\n  mixBlur = 0,\n  mixStrength = 1,\n  resolution = 256,\n  blur = [0, 0],\n  minDepthThreshold = 0.9,\n  maxDepthThreshold = 1,\n  depthScale = 0,\n  depthToBlurRatioBias = 0.25,\n  mirror = 0,\n  distortion = 1,\n  mixContrast = 1,\n  distortionMap,\n  reflectorOffset = 0,\n  ...props\n}, ref) => {\n  extend({\n    MeshReflectorMaterialImpl: MeshReflectorMaterial$1\n  });\n  const gl = useThree(({\n    gl\n  }) => gl);\n  const camera = useThree(({\n    camera\n  }) => camera);\n  const scene = useThree(({\n    scene\n  }) => scene);\n  blur = Array.isArray(blur) ? blur : [blur, blur];\n  const hasBlur = blur[0] + blur[1] > 0;\n  const materialRef = React.useRef(null);\n  const [reflectorPlane] = React.useState(() => new Plane());\n  const [normal] = React.useState(() => new Vector3());\n  const [reflectorWorldPosition] = React.useState(() => new Vector3());\n  const [cameraWorldPosition] = React.useState(() => new Vector3());\n  const [rotationMatrix] = React.useState(() => new Matrix4());\n  const [lookAtPosition] = React.useState(() => new Vector3(0, 0, -1));\n  const [clipPlane] = React.useState(() => new Vector4());\n  const [view] = React.useState(() => new Vector3());\n  const [target] = React.useState(() => new Vector3());\n  const [q] = React.useState(() => new Vector4());\n  const [textureMatrix] = React.useState(() => new Matrix4());\n  const [virtualCamera] = React.useState(() => new PerspectiveCamera());\n  const beforeRender = React.useCallback(() => {\n    var _materialRef$current;\n    // TODO: As of R3f 7-8 this should be __r3f.parent\n    const parent = materialRef.current.parent || ((_materialRef$current = materialRef.current) == null ? void 0 : _materialRef$current.__r3f.parent);\n    if (!parent) return;\n    reflectorWorldPosition.setFromMatrixPosition(parent.matrixWorld);\n    cameraWorldPosition.setFromMatrixPosition(camera.matrixWorld);\n    rotationMatrix.extractRotation(parent.matrixWorld);\n    normal.set(0, 0, 1);\n    normal.applyMatrix4(rotationMatrix);\n    reflectorWorldPosition.addScaledVector(normal, reflectorOffset);\n    view.subVectors(reflectorWorldPosition, cameraWorldPosition);\n    // Avoid rendering when reflector is facing away\n    if (view.dot(normal) > 0) return;\n    view.reflect(normal).negate();\n    view.add(reflectorWorldPosition);\n    rotationMatrix.extractRotation(camera.matrixWorld);\n    lookAtPosition.set(0, 0, -1);\n    lookAtPosition.applyMatrix4(rotationMatrix);\n    lookAtPosition.add(cameraWorldPosition);\n    target.subVectors(reflectorWorldPosition, lookAtPosition);\n    target.reflect(normal).negate();\n    target.add(reflectorWorldPosition);\n    virtualCamera.position.copy(view);\n    virtualCamera.up.set(0, 1, 0);\n    virtualCamera.up.applyMatrix4(rotationMatrix);\n    virtualCamera.up.reflect(normal);\n    virtualCamera.lookAt(target);\n    virtualCamera.far = camera.far; // Used in WebGLBackground\n    virtualCamera.updateMatrixWorld();\n    virtualCamera.projectionMatrix.copy(camera.projectionMatrix);\n    // Update the texture matrix\n    textureMatrix.set(0.5, 0.0, 0.0, 0.5, 0.0, 0.5, 0.0, 0.5, 0.0, 0.0, 0.5, 0.5, 0.0, 0.0, 0.0, 1.0);\n    textureMatrix.multiply(virtualCamera.projectionMatrix);\n    textureMatrix.multiply(virtualCamera.matrixWorldInverse);\n    textureMatrix.multiply(parent.matrixWorld);\n    // Now update projection matrix with new clip plane, implementing code from: http://www.terathon.com/code/oblique.html\n    // Paper explaining this technique: http://www.terathon.com/lengyel/Lengyel-Oblique.pdf\n    reflectorPlane.setFromNormalAndCoplanarPoint(normal, reflectorWorldPosition);\n    reflectorPlane.applyMatrix4(virtualCamera.matrixWorldInverse);\n    clipPlane.set(reflectorPlane.normal.x, reflectorPlane.normal.y, reflectorPlane.normal.z, reflectorPlane.constant);\n    const projectionMatrix = virtualCamera.projectionMatrix;\n    q.x = (Math.sign(clipPlane.x) + projectionMatrix.elements[8]) / projectionMatrix.elements[0];\n    q.y = (Math.sign(clipPlane.y) + projectionMatrix.elements[9]) / projectionMatrix.elements[5];\n    q.z = -1.0;\n    q.w = (1.0 + projectionMatrix.elements[10]) / projectionMatrix.elements[14];\n    // Calculate the scaled plane vector\n    clipPlane.multiplyScalar(2.0 / clipPlane.dot(q));\n    // Replacing the third row of the projection matrix\n    projectionMatrix.elements[2] = clipPlane.x;\n    projectionMatrix.elements[6] = clipPlane.y;\n    projectionMatrix.elements[10] = clipPlane.z + 1.0;\n    projectionMatrix.elements[14] = clipPlane.w;\n  }, [camera, reflectorOffset]);\n  const [fbo1, fbo2, blurpass, reflectorProps] = React.useMemo(() => {\n    const parameters = {\n      minFilter: LinearFilter,\n      magFilter: LinearFilter,\n      type: HalfFloatType\n    };\n    const fbo1 = new WebGLRenderTarget(resolution, resolution, parameters);\n    fbo1.depthBuffer = true;\n    fbo1.depthTexture = new DepthTexture(resolution, resolution);\n    fbo1.depthTexture.format = DepthFormat;\n    fbo1.depthTexture.type = UnsignedShortType;\n    const fbo2 = new WebGLRenderTarget(resolution, resolution, parameters);\n    const blurpass = new BlurPass({\n      gl,\n      resolution,\n      width: blur[0],\n      height: blur[1],\n      minDepthThreshold,\n      maxDepthThreshold,\n      depthScale,\n      depthToBlurRatioBias\n    });\n    const reflectorProps = {\n      mirror,\n      textureMatrix,\n      mixBlur,\n      tDiffuse: fbo1.texture,\n      tDepth: fbo1.depthTexture,\n      tDiffuseBlur: fbo2.texture,\n      hasBlur,\n      mixStrength,\n      minDepthThreshold,\n      maxDepthThreshold,\n      depthScale,\n      depthToBlurRatioBias,\n      distortion,\n      distortionMap,\n      mixContrast,\n      'defines-USE_BLUR': hasBlur ? '' : undefined,\n      'defines-USE_DEPTH': depthScale > 0 ? '' : undefined,\n      'defines-USE_DISTORTION': distortionMap ? '' : undefined\n    };\n    return [fbo1, fbo2, blurpass, reflectorProps];\n  }, [gl, blur, textureMatrix, resolution, mirror, hasBlur, mixBlur, mixStrength, minDepthThreshold, maxDepthThreshold, depthScale, depthToBlurRatioBias, distortion, distortionMap, mixContrast]);\n  useFrame(() => {\n    var _materialRef$current2;\n    // TODO: As of R3f 7-8 this should be __r3f.parent\n    const parent = materialRef.current.parent || ((_materialRef$current2 = materialRef.current) == null ? void 0 : _materialRef$current2.__r3f.parent);\n    if (!parent) return;\n    parent.visible = false;\n    const currentXrEnabled = gl.xr.enabled;\n    const currentShadowAutoUpdate = gl.shadowMap.autoUpdate;\n    beforeRender();\n    gl.xr.enabled = false;\n    gl.shadowMap.autoUpdate = false;\n    gl.setRenderTarget(fbo1);\n    gl.state.buffers.depth.setMask(true);\n    if (!gl.autoClear) gl.clear();\n    gl.render(scene, virtualCamera);\n    if (hasBlur) blurpass.render(gl, fbo1, fbo2);\n    gl.xr.enabled = currentXrEnabled;\n    gl.shadowMap.autoUpdate = currentShadowAutoUpdate;\n    parent.visible = true;\n    gl.setRenderTarget(null);\n  });\n  return /*#__PURE__*/React.createElement(\"meshReflectorMaterialImpl\", _extends({\n    attach: \"material\"\n    // Defines can't be updated dynamically, so we need to recreate the material\n    ,\n    key: 'key' + reflectorProps['defines-USE_BLUR'] + reflectorProps['defines-USE_DEPTH'] + reflectorProps['defines-USE_DISTORTION'],\n    ref: mergeRefs([materialRef, ref])\n  }, reflectorProps, props));\n});\n\nexport { MeshReflectorMaterial };\n","/*\nAuto-generated by: https://github.com/pmndrs/gltfjsx\nCommand: npx gltfjsx@6.2.16 static/models/scene.glb -k -t \n*/\n\nimport * as THREE from 'three';\nimport React, { useRef } from 'react';\nimport { MeshReflectorMaterial, useCamera, useGLTF, useTexture } from '@react-three/drei';\nimport { GLTF } from 'three-stdlib';\nimport { prefix } from '../utility/environment';\n\ntype GLTFResult = GLTF & {\n  nodes: {\n    plant001: THREE.Mesh;\n    Circle001: THREE.Mesh;\n    NurbsPath006: THREE.Mesh;\n    NurbsPath007: THREE.Mesh;\n    NurbsPath008: THREE.Mesh;\n    NurbsPath009: THREE.Mesh;\n    NurbsPath010: THREE.Mesh;\n    NurbsPath011: THREE.Mesh;\n    Circle002: THREE.Mesh;\n    Circle002_1: THREE.Mesh;\n    Circle002_2: THREE.Mesh;\n    Circle002_3: THREE.Mesh;\n    Circle002_4: THREE.Mesh;\n    Circle006: THREE.Mesh;\n    Circle006_1: THREE.Mesh;\n    FrontCameraRing001: THREE.Mesh;\n    Circle: THREE.Mesh;\n    Circle_1: THREE.Mesh;\n    Circle_2: THREE.Mesh;\n    KeyboardKeyHole: THREE.Mesh;\n    RubberFoot: THREE.Mesh;\n    Circle012: THREE.Mesh;\n    Circle012_1: THREE.Mesh;\n    Circle009: THREE.Mesh;\n    Circle009_1: THREE.Mesh;\n    Circle003: THREE.Mesh;\n    Circle003_1: THREE.Mesh;\n    Circle005: THREE.Mesh;\n    Circle005_1: THREE.Mesh;\n    Circle005_2: THREE.Mesh;\n    Circle005_3: THREE.Mesh;\n    Circle005_4: THREE.Mesh;\n    Desk: THREE.Mesh;\n    OfficeChair_1: THREE.Mesh;\n    OfficeChair_2: THREE.Mesh;\n    OfficeChair_3: THREE.Mesh;\n    Plane_1: THREE.Mesh;\n    Plane_2: THREE.Mesh;\n    Plane_3: THREE.Mesh;\n    rubber_duck_toy: THREE.Mesh;\n    Glass: THREE.Mesh;\n  };\n  materials: {\n    ['Material.028']: THREE.MeshStandardMaterial;\n    ['Material.030']: THREE.MeshStandardMaterial;\n    ['Material.007']: THREE.MeshStandardMaterial;\n    ['Material.006']: THREE.MeshStandardMaterial;\n    ['Material.005']: THREE.MeshStandardMaterial;\n    ['Material.004']: THREE.MeshStandardMaterial;\n    ['Material.003']: THREE.MeshStandardMaterial;\n    ['Material.002']: THREE.MeshStandardMaterial;\n    ['Frame.001']: THREE.MeshStandardMaterial;\n    HeadPhoneHole: THREE.MeshStandardMaterial;\n    USB_C_INSIDE: THREE.MeshStandardMaterial;\n    TouchbarBorder: THREE.MeshStandardMaterial;\n    Keyboard: THREE.MeshStandardMaterial;\n    ['CameraRIngBlack.002']: THREE.MeshStandardMaterial;\n    ['Keyboard.001']: THREE.MeshStandardMaterial;\n    Key: THREE.MeshStandardMaterial;\n    Touchbar: THREE.MeshStandardMaterial;\n    DarkRubber: THREE.MeshStandardMaterial;\n    HingeBlack: THREE.MeshStandardMaterial;\n    HingeMetal: THREE.MeshStandardMaterial;\n    SpeakerHole: THREE.MeshStandardMaterial;\n    ['Frame.002']: THREE.MeshStandardMaterial;\n    Screen: THREE.MeshStandardMaterial;\n    ScreenGlass: THREE.MeshStandardMaterial;\n    Rubber: THREE.MeshStandardMaterial;\n    DisplayGlass: THREE.MeshStandardMaterial;\n    Material: THREE.MeshStandardMaterial;\n    Grey: THREE.MeshStandardMaterial;\n    Black: THREE.MeshStandardMaterial;\n    Chair: THREE.MeshStandardMaterial;\n    Glass: THREE.MeshStandardMaterial;\n    Default: THREE.MeshStandardMaterial;\n    Floor: THREE.MeshStandardMaterial;\n    rubber_duck_toy: THREE.MeshStandardMaterial;\n  };\n  animations: any; // GLTFAction[]\n};\n\ntype ContextType = Record<string, React.ForwardRefExoticComponent<JSX.IntrinsicElements['mesh']>>;\n\nconst Office = (props: JSX.IntrinsicElements['group']) => {\n  const { nodes, materials } = useGLTF(prefix + '/models/scene.glb') as GLTFResult;\n\n  const texture = useTexture(prefix + '/textures/baked.jpg');\n  texture.flipY = false;\n  texture.colorSpace = THREE.SRGBColorSpace;\n\n  const textureMaterial = new THREE.MeshStandardMaterial({\n    map: texture,\n    roughness: 1,\n    metalness: 0,\n  });\n\n  const textureGlassMaterial = new THREE.MeshStandardMaterial({\n    map: texture,\n    transparent: true,\n    opacity: 0.4,\n  });\n\n  // material=\\{[^}]+\\}\n\n  return (\n    <group {...props} dispose={null}>\n      <mesh\n        name=\"plant001\"\n        geometry={nodes.plant001.geometry}\n        material={textureMaterial}\n        position={[1.213, 0.107, -1.665]}\n        rotation={[-Math.PI, 0.08, -Math.PI]}\n      >\n        <mesh name=\"Circle001\" geometry={nodes.Circle001.geometry} material={textureMaterial} />\n        <mesh name=\"NurbsPath006\" geometry={nodes.NurbsPath006.geometry} material={textureMaterial} />\n        <mesh name=\"NurbsPath007\" geometry={nodes.NurbsPath007.geometry} material={textureMaterial} />\n        <mesh name=\"NurbsPath008\" geometry={nodes.NurbsPath008.geometry} material={textureMaterial} />\n        <mesh name=\"NurbsPath009\" geometry={nodes.NurbsPath009.geometry} material={textureMaterial} />\n        <mesh name=\"NurbsPath010\" geometry={nodes.NurbsPath010.geometry} material={textureMaterial} />\n        <mesh name=\"NurbsPath011\" geometry={nodes.NurbsPath011.geometry} material={textureMaterial} />\n      </mesh>\n      <group name=\"Macbook\" position={[0.031, 0.735, -1.559]}>\n        <mesh name=\"Circle002\" geometry={nodes.Circle002.geometry} material={textureMaterial} />\n        <mesh name=\"Circle002_1\" geometry={nodes.Circle002_1.geometry} material={textureMaterial} />\n        <mesh name=\"Circle002_2\" geometry={nodes.Circle002_2.geometry} material={textureMaterial} />\n        <mesh name=\"Circle002_3\" geometry={nodes.Circle002_3.geometry} material={textureMaterial} />\n        <mesh name=\"Circle002_4\" geometry={nodes.Circle002_4.geometry} material={textureMaterial} />\n        <group name=\"Bottom\" position={[0, -0.009, 0]}>\n          <mesh name=\"Circle006\" geometry={nodes.Circle006.geometry} material={textureMaterial} />\n          <mesh name=\"Circle006_1\" geometry={nodes.Circle006_1.geometry} material={textureMaterial} />\n        </group>\n        <mesh\n          name=\"FrontCameraRing001\"\n          geometry={nodes.FrontCameraRing001.geometry}\n          material={textureMaterial}\n          position={[-0.003, 0.364, -0.3]}\n        />\n        <group name=\"Keyboard\" position={[-0.219, -0.003, -0.154]}>\n          <mesh name=\"Circle\" geometry={nodes.Circle.geometry} material={textureMaterial} />\n          <mesh name=\"Circle_1\" geometry={nodes.Circle_1.geometry} material={textureMaterial} />\n          <mesh name=\"Circle_2\" geometry={nodes.Circle_2.geometry} material={textureMaterial} />\n        </group>\n        <mesh\n          name=\"KeyboardKeyHole\"\n          geometry={nodes.KeyboardKeyHole.geometry}\n          material={textureMaterial}\n          position={[-0.219, -0.003, -0.154]}\n        />\n        <mesh\n          name=\"RubberFoot\"\n          geometry={nodes.RubberFoot.geometry}\n          material={textureMaterial}\n          position={[-0.222, -0.014, 0.146]}\n        />\n        <group name=\"ScreenHinge\" position={[0, -0.004, -0.196]}>\n          <mesh name=\"Circle012\" geometry={nodes.Circle012.geometry} material={textureMaterial} />\n          <mesh name=\"Circle012_1\" geometry={nodes.Circle012_1.geometry} material={textureMaterial} />\n        </group>\n        <group name=\"SpeakerLeft\" position={[-0.279, 0.001, 0.011]}>\n          <mesh name=\"Circle009\" geometry={nodes.Circle009.geometry} material={textureMaterial} />\n          <mesh name=\"Circle009_1\" geometry={nodes.Circle009_1.geometry} material={textureMaterial} />\n        </group>\n        <group name=\"SpeakerRight\" position={[0.227, 0.001, 0.011]}>\n          <mesh name=\"Circle003\" geometry={nodes.Circle003.geometry} material={textureMaterial} />\n          <mesh name=\"Circle003_1\" geometry={nodes.Circle003_1.geometry} material={textureMaterial} />\n        </group>\n        <group name=\"Top\" position={[0, -0.009, -0.193]} rotation={[1.311, 0, 0]}>\n          <mesh name=\"Circle005\" geometry={nodes.Circle005.geometry} material={textureMaterial} />\n          <mesh name=\"Circle005_1\" geometry={nodes.Circle005_1.geometry} material={textureMaterial} />\n          <mesh name=\"Circle005_2\" geometry={nodes.Circle005_2.geometry} material={textureMaterial} />\n          <mesh name=\"Circle005_3\" geometry={nodes.Circle005_3.geometry} material={textureMaterial} />\n          <mesh name=\"Circle005_4\" geometry={nodes.Circle005_4.geometry} material={textureGlassMaterial}>\n            <MeshReflectorMaterial\n              blur={[0, 0]} // Blur ground reflections (width, height), 0 skips blur\n              mixBlur={0.2} // How much blur mixes with surface roughness (default = 1)\n              mixStrength={0.4} // Strength of the reflections\n              mixContrast={1} // Contrast of the reflections\n              resolution={256} // Off-buffer resolution, lower=faster, higher=better quality, slower\n              mirror={1} // Mirror environment, 0 = texture colors, 1 = pick up env colors\n              depthScale={0} // Scale the depth factor (0 = no depth, default = 0)\n              minDepthThreshold={0.9} // Lower edge for the depthTexture interpolation (default = 0)\n              maxDepthThreshold={1} // Upper edge for the depthTexture interpolation (default = 0)\n              depthToBlurRatioBias={0.25} // Adds a bias factor to the depthTexture before calculating the blur amount [blurFactor = blurTexture * (depthTexture + bias)]. It accepts values between 0 and 1, default is 0.25. An amount > 0 of bias makes sure that the blurTexture is not too sharp because of the multiplication with the depthTexture\n              distortion={1} // Amount of distortion based on the distortionMap texture\n              reflectorOffset={0.2} // Offsets the virtual camera that projects the reflection. Useful when the reflective surface is some distance from the object's origin (default = 0)\n              transparent={true}\n              opacity={0.8}\n            />\n          </mesh>\n        </group>\n      </group>\n      <mesh name=\"Desk\" geometry={nodes.Desk.geometry} material={textureMaterial} position={[-0.618, 0, -1.677]} />\n      <group name=\"OfficeChair\" position={[-0.303, 0, -0.492]} rotation={[-Math.PI / 2, 0, 2.239]}>\n        <mesh name=\"OfficeChair_1\" geometry={nodes.OfficeChair_1.geometry} material={textureMaterial} />\n        <mesh name=\"OfficeChair_2\" geometry={nodes.OfficeChair_2.geometry} material={textureMaterial} />\n        <mesh name=\"OfficeChair_3\" geometry={nodes.OfficeChair_3.geometry} material={textureMaterial} />\n      </group>\n      <mesh\n        name=\"rubber_duck_toy\"\n        geometry={nodes.rubber_duck_toy.geometry}\n        material={textureMaterial}\n        position={[0, 0, -0.344]}\n      />\n      <mesh\n        name=\"Glass\"\n        geometry={nodes.Glass.geometry}\n        material={textureGlassMaterial}\n        position={[-2.119, 1.346, -0.663]}\n        scale={[0.068, 0.324, 0.63]}\n      />\n      <mesh name=\"Plane_1\" geometry={nodes.Plane_1.geometry} material={textureMaterial} />\n      <mesh name=\"Plane_2\" geometry={nodes.Plane_2.geometry} material={textureMaterial} />\n      <mesh name=\"Plane_3\" geometry={nodes.Plane_3.geometry} material={textureMaterial} />\n    </group>\n  );\n};\n\nuseGLTF.preload(prefix + '/models/scene.glb');\n\nexport default Office;\n\n"],"names":["IsObject","url","Object","Array","isArray","useTexture","input","onLoad","gl","state","textures","TextureLoader","values","useLayoutEffect","useEffect","forEach","initTexture","keyed","i","key","preload","clear","version","parseInt","REVISION","replace","getVersion","ConvolutionMaterial","constructor","texelSize","super","uniforms","inputBuffer","depthBuffer","resolution","halfTexelSize","kernel","scale","cameraNear","cameraFar","minDepthThreshold","maxDepthThreshold","depthScale","depthToBlurRatioBias","fragmentShader","vertexShader","blending","depthWrite","depthTest","this","toneMapped","setTexelSize","x","y","Float32Array","value","set","multiplyScalar","setResolution","copy","BlurPass","width","height","renderToScreen","renderTargetA","WebGLRenderTarget","minFilter","LinearFilter","magFilter","stencilBuffer","type","HalfFloatType","renderTargetB","clone","convolutionMaterial","Vector2","scene","Scene","camera","Camera","defines","USE_DEPTH","vertices","uvs","geometry","BufferGeometry","setAttribute","BufferAttribute","screen","Mesh","frustumCulled","add","render","renderer","outputBuffer","material","depthTexture","destRT","l","lastRT","length","texture","setRenderTarget","MeshReflectorMaterial","MeshStandardMaterial","parameters","_tDepth","_distortionMap","_tDiffuse","_tDiffuseBlur","_textureMatrix","_hasBlur","_mirror","_mixBlur","_blurStrength","_minDepthThreshold","_maxDepthThreshold","_depthScale","_depthToBlurRatioBias","_distortion","_mixContrast","setValues","onBeforeCompile","shader","_shader$defines","USE_UV","hasBlur","tDiffuse","tDepth","distortionMap","tDiffuseBlur","textureMatrix","mirror","mixBlur","mixStrength","distortion","mixContrast","v","blur","reflectorOffset","props","ref","e","MeshReflectorMaterialImpl","materialRef","reflectorPlane","Plane","normal","Vector3","reflectorWorldPosition","cameraWorldPosition","rotationMatrix","Matrix4","lookAtPosition","clipPlane","Vector4","view","target","q","virtualCamera","PerspectiveCamera","beforeRender","_materialRef$current","parent","current","__r3f","setFromMatrixPosition","matrixWorld","extractRotation","applyMatrix4","addScaledVector","subVectors","dot","reflect","negate","position","up","lookAt","far","updateMatrixWorld","projectionMatrix","multiply","matrixWorldInverse","setFromNormalAndCoplanarPoint","z","constant","Math","sign","elements","w","fbo1","fbo2","blurpass","reflectorProps","DepthTexture","format","DepthFormat","UnsignedShortType","undefined","_materialRef$current2","visible","currentXrEnabled","xr","enabled","currentShadowAutoUpdate","shadowMap","autoUpdate","buffers","depth","setMask","autoClear","attach","useGLTF","prefix","nodes","materials","flipY","colorSpace","THREE","textureMaterial","map","roughness","metalness","textureGlassMaterial","transparent","opacity","React","assign","dispose","name","plant001","rotation","PI","Circle001","NurbsPath006","NurbsPath007","NurbsPath008","NurbsPath009","NurbsPath010","NurbsPath011","Circle002","Circle002_1","Circle002_2","Circle002_3","Circle002_4","Circle006","Circle006_1","FrontCameraRing001","Circle","Circle_1","Circle_2","KeyboardKeyHole","RubberFoot","Circle012","Circle012_1","Circle009","Circle009_1","Circle003","Circle003_1","Circle005","Circle005_1","Circle005_2","Circle005_3","Circle005_4","Desk","OfficeChair_1","OfficeChair_2","OfficeChair_3","rubber_duck_toy","Glass","Plane_1","Plane_2","Plane_3"],"sourceRoot":""}